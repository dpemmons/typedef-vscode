%YAML 1.2
---
name: Typedef
file_extensions:
  - td
scope: source.typedef

contexts:
  main:
    - include: comments
    - include: keywords
    - include: identifiers
    - include: literals
    - include: type-definitions
    - include: template-definitions
    - include: expressions
    - include: control-flow
    - include: module-and-use
    - include: operators-and-punctuation
    - include: misc-keywords

  comments:
    - match: '//.*'
      scope: comment.line.double-slash.typedef
    - match: '/\*.*?\*/'
      scope: comment.block.typedef

  keywords:
    - match: \b(array|as|enum|false|fn|impl|message|module|struct|true|type|typedef|use|variant|vector|map|template)\b
      scope: keyword.control.typedef

  identifiers:
    - match: \b[a-zA-Z_][a-zA-Z0-9_]*\b
      scope: variable.parameter.typedef

  literals:
    - match: \b(true|false)\b
      scope: constant.language.boolean.typedef
    - match: '(\d*\.\d+|\d+\.\d*)([eE][+-]?\d+)?'
      scope: constant.numeric.float.typedef
    - match: '\d+'
      scope: constant.numeric.integer.typedef
    - match: '''(\\.|[^''\\])*'''
      scope: string.quoted.single.typedef
    - match: '"(\\.|[^"\\])*"'
      scope: string.quoted.double.typedef

  type-definitions:
    - match: \b(struct|variant)\s+[a-zA-Z_][a-zA-Z0-9_]*\b
      scope: storage.type.typedef

  template-definitions:
    - match: \btemplate\s+[a-zA-Z_][a-zA-Z0-9_]*\b
      scope: storage.type.template.typedef

  expressions:
    - match: \b([a-zA-Z_][a-zA-Z0-9_]*\s*)\((.*)\)\b
      scope: meta.function-call.typedef

  control-flow:
    - match: \b(if|else|for|while|match|return|break|continue)\b
      scope: keyword.control.flow.typedef

  module-and-use:
    - match: \b(module|use)\s+[a-zA-Z_][a-zA-Z0-9_]*\b
      scope: entity.name.namespace.typedef

  operators-and-punctuation:
    - match: '[=+*/%&|^<>!~-]'
      scope: keyword.operator.typedef
    - match: '[{}\[\]();,.]'
      scope: punctuation.typedef

  misc-keywords:
    - match: \b(and|or|xor|not|let|in|sizeof|this|trait|where)\b
      scope: keyword.other.typedef
